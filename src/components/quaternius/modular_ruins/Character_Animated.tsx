/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    NurbsPath001_1: THREE.Mesh
    NurbsPath001_2: THREE.Mesh
    NurbsPath001_3: THREE.Mesh
    NurbsPath001_4: THREE.Mesh
    Rogue_1: THREE.SkinnedMesh
    Rogue_2: THREE.SkinnedMesh
    Rogue_3: THREE.SkinnedMesh
    Rogue_4: THREE.SkinnedMesh
    Rogue_5: THREE.SkinnedMesh
    Rogue_6: THREE.SkinnedMesh
    Rogue001: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    Hair: THREE.MeshStandardMaterial
    Eye: THREE.MeshStandardMaterial
    Pupil: THREE.MeshStandardMaterial
    White: THREE.MeshStandardMaterial
    Skin: THREE.MeshStandardMaterial
    UnderShirt: THREE.MeshStandardMaterial
    Pants: THREE.MeshStandardMaterial
    Shirt: THREE.MeshStandardMaterial
    Detail: THREE.MeshStandardMaterial
    Boots: THREE.MeshStandardMaterial
    ['Material.006']: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'Attacking_Idle'
  | 'Dagger_Attack'
  | 'Dagger_Attack2'
  | 'Death'
  | 'PickUp'
  | 'Punch'
  | 'RecieveHit'
  | 'RecieveHit_Attacking'
  | 'Roll'
  | 'Run'
  | 'Walk'
  | 'Idle'
  | 'CharacterArmature|Attacking_Idle'
  | 'CharacterArmature|Dagger_Attack'
  | 'CharacterArmature|Dagger_Attack2'
  | 'CharacterArmature|Death'
  | 'CharacterArmature|Idle'
  | 'CharacterArmature|PickUp'
  | 'CharacterArmature|Punch'
  | 'CharacterArmature|RecieveHit'
  | 'CharacterArmature|RecieveHit_Attacking'
  | 'CharacterArmature|Roll'
  | 'CharacterArmature|Run'
  | 'CharacterArmature|Walk'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/glb/modular_ruins/Character_Animated.glb') as unknown as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Root_Scene'>
        <group name='RootNode'>
          <group name='CharacterArmature' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name='Rogue' position={[0, 0, 0.17]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name='Rogue_1'
              geometry={nodes.Rogue_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Rogue_1.skeleton}
            />
            <skinnedMesh
              name='Rogue_2'
              geometry={nodes.Rogue_2.geometry}
              material={materials.UnderShirt}
              skeleton={nodes.Rogue_2.skeleton}
            />
            <skinnedMesh
              name='Rogue_3'
              geometry={nodes.Rogue_3.geometry}
              material={materials.Pants}
              skeleton={nodes.Rogue_3.skeleton}
            />
            <skinnedMesh
              name='Rogue_4'
              geometry={nodes.Rogue_4.geometry}
              material={materials.Shirt}
              skeleton={nodes.Rogue_4.skeleton}
            />
            <skinnedMesh
              name='Rogue_5'
              geometry={nodes.Rogue_5.geometry}
              material={materials.Detail}
              skeleton={nodes.Rogue_5.skeleton}
            />
            <skinnedMesh
              name='Rogue_6'
              geometry={nodes.Rogue_6.geometry}
              material={materials.Boots}
              skeleton={nodes.Rogue_6.skeleton}
            />
          </group>
          <skinnedMesh
            name='Rogue001'
            geometry={nodes.Rogue001.geometry}
            material={materials['Material.006']}
            skeleton={nodes.Rogue001.skeleton}
            position={[0, 0, 0.17]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/glb/modular_ruins/Character_Animated.glb')
